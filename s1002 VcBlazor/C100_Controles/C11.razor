
<div class=@Visible>
    <div class="mb-3">
        <label class="form-label">
            <strong>@Label</strong>
        </label>
        <InputText class="form-control"
                   type=@Tipo
                   style=@Estilos
        @bind-Value="@Respuesta"
                   disabled="@Desabilitado"
        @oninput="HandleInput"        
        @onfocus="@OnFocus"
        @onblur="@OnBlur" />

    </div>
</div>

@code {
    [Parameter] public EventCallback<FocusEventArgs> OnFocus { get; set; }
    [Parameter] public EventCallback<FocusEventArgs> OnBlur { get; set; }
    [Parameter] public EventCallback<FocusEventArgs> OnInput { get; set; }

    [Parameter] public string Campo { get; set; } = string.Empty;
    [Parameter] public string Label { get; set; } = string.Empty;
    [Parameter] public string Estilos { get; set; } = string.Empty;
    [Parameter] public string Tipo { get; set; } = string.Empty;
    [Parameter] public bool Desabilitado { get; set; }
    [Parameter] public string Visible { get; set; } = string.Empty;
    [Parameter] public string Indice { get; set; } = string.Empty;
    [Parameter] public string TxtARows { get; set; } = string.Empty;
    private string _value;

    [Parameter]
    public EventCallback<string> RespuestaChanged { get; set; }

    [Parameter]
    public string Respuesta
    {
        get => _value;
        set
        {
            if (_value == value) return;
            _value = value;
            RespuestaChanged.InvokeAsync(value);
        }
    }

    private void OnValueChanged(ChangeEventArgs e)
    {
        Respuesta = e.Value.ToString();
        RespuestaChanged.InvokeAsync(Respuesta);
    }
    private void HandleInput(ChangeEventArgs e)
    {
        Respuesta = e.Value.ToString().ToUpper();
    }
}
